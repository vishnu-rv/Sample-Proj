pipeline {
    agent any

     environment {
        DOCKER_CREDENTIALS_ID = '54976742-d291-4757-b697-a1c1e178da6c'
        GIT_CREDENTIALS_ID = '6881cda4-f7d0-444e-8f4d-3ec3ae05f9de'
        DOCKER_IMAGE = 'vishnu2117/devops-proj-1'
        K8S_NAMESPACE = 'my-proj'
        K8S_DEPLOYMENT = 'my-devops-proj'
        K8S_SERVICE = 'devops-service'
        KUBE_CONFIG_CREDENTIALS_ID = 'd3a89aeb-9181-4f6d-b74e-2baf7bc6a43e' 
    }

    stages {
        stage('Clone Repository') {
            steps {
                git credentialsId: GIT_CREDENTIALS_ID, url: 'https://github.com/vishnu-rv/Sample-Proj.git'
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    docker.build("${DOCKER_IMAGE}:${NEW_VERSION}")
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    docker.withRegistry('', "${DOCKER_CREDENTIALS_ID}") {
                        docker.image("${DOCKER_IMAGE}:${NEW_VERSION}").push()
                    }
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                script {
                    kubectl.setImage("deployment/${K8S_DEPLOYMENT} ${K8S_DEPLOYMENT}=${DOCKER_IMAGE}:${NEW_VERSION} --namespace=${K8S_NAMESPACE}")
                }
            }
        }

        stage('Update Version in Repo') {
            steps {
                script {
                    // Read the current version
                    def currentVersion = readFile(VERSION_FILE).trim()
                    // Update the version file
                    writeFile file: VERSION_FILE, text: "${NEW_VERSION}"
                    // Commit the new version back to the repo
                    sh """
                        git config user.email "vishnuofficial2117@gmail.com"
                        git config user.name "vishnu"
                        git add ${VERSION_FILE}
                        git commit -m "Update version to ${NEW_VERSION} after deployment"
                        git push origin master
                    """
                }
            }
        }
    }

    post {
        success {
            echo "Deployment and version update completed successfully."
        }
        failure {
            echo "Deployment failed. Version update not performed."
        }
    }
}
